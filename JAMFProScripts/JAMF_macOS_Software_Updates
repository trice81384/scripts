#!/bin/sh

## Define Global Variables
loggedInUser=""
AvailableUpdates=""
## Total amount of RestartReq="0update chances we will give the user
TotalAttempts="3"
## Final Chance is always 1 more then TotalAttempts can code this to just add 1 to 
## a blank FinalChance Variable which will require 1 less variable to update
FinalChance=$(($TotalAttempts+1))
UpdateCount="0"
UpdateAttempts="0"
UpdateChancesLeft="0"
## Determine if a restart is required by updates. 0 for no and 1 for yes
RestartReq="0"
UpdateAttemptsFile="/etc/SUScount.txt"
JAMFHelperPath="/Library/Application Support/JAMF/bin/jamfHelper.app/Contents/MacOS/jamfHelper"
JAMFHelperIcon="/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/FinderIcon.icns"
JAMFHelperTitle="Software Update"
JAMFHelperHeading="Software Updates Available"
JAMFHelperDescription="Please save all your work, quit open programs, and make sure your computer is plugged in.

This process will take approximately 5-10 minutes.

Once completed your computer will reboot and begin the update."

## JAMF Binary Check
##
## This if statement is designed to check for the location of the jamf binary in multiple places 
## due to changes in OSX associated with JAMF's upgrade to version 9.81
## References to the JAMF Binary must be changed to "$jamfBinary"
##
if [ -e /usr/local/jamf/bin/jamf ]
   then
      # JAMF Binary found at 9.81 or later location
      echo "JAMF Binary found at 9.81 or later location"
      jamfBinary="/usr/local/jamf/bin/jamf"
      #
   elif [ -e /usr/local/bin/jamf ]
   then
      # Alias to the JAMF Binary found
      echo "Alias to the JAMF Binary found"
      jamfBinary="/usr/local/bin/jamf"
      #
   else
   echo "JAMF Binary not found"
fi
## End JAMF Check if statement

##  Get minor version of OS X
##  Not currently used but could be someday.

osVers=$( sw_vers -productVersion | cut -d. -f2 )

## Set the installAllAtLogin flag here to 'yes' or leave it blank (equivalent to 'no')
## Function: When the script is run on a Mac that is at the login window, if the flag is set to 'yes',
## it will lock the login window to prevent unintended logins and proceed to install all available updates.
## Once completed, the login window will either be unlocked in the case of no restarts needed,
## or a restart will be done immediately to complete the installations.
## Not currenly used but might be a useful flag later
installAllAtLogin="yes"

## If the file containing the number of software update attempts does not exist or has a size
## of RestartReq="0zero bytes then set the number of update attempts to zero by writing just a zero to the file

if [ ! -s "$UpdateAttemptsFile" ]
   then
   /bin/echo 0 > $UpdateAttemptsFile
fi

## Write the contents of UpdateAttemptsFile to a variable so it can be manipulated later
## and written back to the UpdateAttemptsFile based upon user input

UpdateCount=`/bin/cat $UpdateAttemptsFile`

##### Function to run if there are no updates that need to be restarted

installUpdatesNoRestart()
{
"$jamfBinary" policy -trigger runsoftwareupdate
/bin/echo 0 > $UpdateAttemptsFile
}

#### Function to run if there are updates that need to be restarted

updatesWithRestart()
{

loggedInUser=`ls -l /dev/console | /usr/bin/awk '{ print $3 }'`

if [ "$loggedInUser" != "root" ]
then
   UpdateChancesLeft=$((TotalAttempts - UpdateCount))
        if [ $UpdateChancesLeft = 0 ]
        then
           installMSG="Critical software updates are now running.
Please do not shut down your Mac or put it to sleep.
           
IMPORTANT:
We recommend saving any important documents now.
Your Mac will reboot in order to complete the update."
           
           "$JAMFHelperPath" -windowType utility -title "$JAMFHelperTitle" \
           -icon "$JAMFHelperIcon" -iconSize 128 -heading "Software Updates Installing" -alignHeading center -description "$installMSG" \
           -alignDescription center -timeout 15
           echo "Forced installation of software updates happening."
           installUpdates    
        else
           UpdateAttempts=$((UpdateCount + 1))
           InformativeTextMsg="The following is waiting to be installed and requires a restart of your computer:

$UpdatesReqRestart

This is user installation attempt $UpdateAttempts of $TotalAttempts.
           
Attempt $FinalChance will install updates automatically and your machine will restart.

**Updates may also be run from Electric Self Service.**"

           UserResponse=$("$JAMFHelperPath" -windowType utility -title "$JAMFHelperTitle" \
               -icon "$JAMFHelperIcon" -iconSize 128 -heading "$JAMFHelperHeading" -alignHeading center -description "$InformativeTextMsg" \
               -alignDescription center -button1 "Install" -button2 "Cancel" -cancelButton 2 )
                if [ $UserResponse == 2 ]
                then
                   /bin/echo $UpdateAttempts > $UpdateAttemptsFile
                   echo "User choose to defer"
                   echo "This was user installation attempt $UpdateAttempts of $TotalAttempts."
                   exit 0
                elif [ $UserResponse == 0 ]
                then
                  echo "User choose to install Software Updates."
                  # We capture the JAMF Helper's PID so we can pass it to the disown command which removes it from
                  # the shell's list of watched jobs. The prevents debug messages from being generated when killing the process.
                  ## Disown works more reliably then using "wait" for the shell to release the job and piping the output to /dev/null
                  installUpdates
                fi
         fi
else
## No user logged in go ahead an install
"$jamfBinary" policy -trigger runsoftwareupdate
/bin/echo 0 > $UpdateAttemptsFile
fi

}

##	Function to install selected updates, updating progress bar with information
installUpdates ()
{

## When invoking this function there should be no JAMF helper windows running
## but just in case there are check for the process, disown it, and kill it.

jamfHelperUID=$(pgrep jamfHelper)

if [ "$jamfHelperUID" != "" ]
then
   disown $jamfHelperUID
   killall jamfHelper
fi 


SoftwareUpdateMessage="   Installing Software Updates   
for macOS.

Your computer will reboot when finished."

"$JAMFHelperPath" -windowType utility -title "$JAMFHelperTitle" \
-icon "$JAMFHelperIcon" -iconSize 96 -heading "Installing Updates" -alignHeading center -description "$SoftwareUpdateMessage" \
-alignDescription center &

jamfHelperUID=$(pgrep jamfHelper)
disown $jamfHelperUID

## Call the software update process
#/usr/sbin/softwareupdate -i -a
SWU_OUTPUT=$(softwareupdate -ia --no-scan | grep -e halt)

## We put the recon here so it runs in the background and as the restart countdown begins.

"$jamfBinary" recon &

## Set the initial timer to 300 which will end up equating to 5 mins.
## We use let here so it is sure to assign the variable as a number.
## Probably not necessary but just in case.

let Counter="300"

## Check for the existence of the output file from the JAMF helper command
## left over from previous executions.

if [ -e /tmp/UserInput ]
   then
   rm /tmp/UserInput
fi

## Display a JAMF Helper window notifying the user that a reboot in order to update will happen at 
## a specified period of time and give them the option to enable it immediately.
## We send the output to the named pipe and keep the process running in the background which allows for two things.
## It keeps the window displayed but allows the while loop to start the countdown right away and by sending the 
## output of command to the named pipe we can then continually assign its contents to a variable inside the while
## loop allowing the if statement in that loop to check the status of the variable which equates to a user selecting
## to reboot immediately. If we didn't do it this way the output of the command would only get checked once when the 
## command initially ran.

RebootMsg="   Your computer will reboot in 5 mins.   

Please save all work and quit any open applications.

Click Reboot to start this process immediately."

FinalRebootMessage="   Your computer will reboot in 1 minute.   

Please save all work and quit all applications now."

killall jamfHelper

"$JAMFHelperPath" -windowType utility -title "$JAMFHelperTitle" \
-icon "$JAMFHelperIcon" -iconSize 128 -heading "Software Updates Installed" -alignHeading center -description "$RebootMsg" \
-alignDescription center -button1 "Reboot" > /tmp/UserInput &

## While loop to run for at least 300 iterations (which equals 5 mins) while checking certain conditions.
## We inject a 1 second sleep command into each run of the while loop to approximate 5 minutes. If we did not
## have the sleep command the loop would execute too quickly. Once the loop is over the machine will reboot.

while [ "$Counter" != "0" ]
do
## Check contents of named pipe and assign it to UserResponse

UserResponse=$(cat /tmp/UserInput)

## If UserResponse equals 0 (return code of pushing the button) then we assume user has selected to reboot now so
## we run execute the enable Mojave Update policy and reboot the machine so it is enforced for the
## current user on login. We also set the counter 1 one as a safety measure in case it doesn't break out
## of the loop right away. One more subtraction from the counter variable would occur causing it to equal
## 0 which would also cause the loop to end and FileVault to enable. We could use a break statement here to
## but I liked this method.
## If the user response has not equated to 0 then we'll pop uo a window displaying that there is only 60
## seconds left before the Mojave update is started and a reboot happens. We must get the PID of the previous jamfHelper
## process and disown it first (to prevent unnecessary error messages) then kill it before we display the new
## message.

if [ "$UserResponse" == "0" ]
  then
     echo "User Choose to reboot immediately."
     Counter="1"
elif [ "$Counter" == 60 ]
  then
     jamfHelperUID=$(pgrep jamfHelper)
     disown $jamfHelperUID
     killall jamfHelper
     "$JAMFHelperPath" -windowType utility -title "$JAMFHelperTitle" \
     -icon "$JAMFHelperIcon" -iconSize 128 -heading "Software Updates Installed" -alignHeading center -description "$FinalRebootMessage" \
     -alignDescription center &
fi
sleep 1
Counter=$((Counter - 1))
done

## Remove the named pipe

if [ -e /tmp/UserInput ]
   then
   rm /tmp/UserInput
fi

jamfHelperUID=$(pgrep jamfHelper)
disown $jamfHelperUID
killall jamfHelper

"$JAMFHelperPath" -windowType utility -title "$JAMFHelperTitle" \
-icon "$JAMFHelperIcon" -iconSize 128 -heading "Software Updates Installed" -alignHeading center -description "COMPUTER REBOOT TIME HAS ARRIVED" \
-alignDescription center &

## Delete the update countfile once just so it's gone
rm -r $UpdateAttemptsFile
#echo "Rebooting the Machine" 
#shutdown -r now

if [ "$SWU_OUTPUT" != "" ]
   then
     echo "Shutting down the system immediately."
     halt
   else
     echo "Restarting the system immediately."
     reboot
fi

}

getUpdates()
{
rm /tmp/softwareupdates.txt

/usr/sbin/softwareupdate --list >> /tmp/softwareupdates.txt

UpdatesReqRestart=`cat /tmp/softwareupdates.txt | egrep 'restart|shutdown' | awk -F ',|\\\(' '{print$1}'`

UpdatesNoRestart=`cat /tmp/softwareupdates.txt | egrep -v 'restart|shutdown' | egrep recommended | awk -F ',|\\\(' '{print$1}'`

if [ "$UpdatesReqRestart" == "" ] && [ "$UpdatesNoRestart" == "" ]
   then
   if [ -e "$UpdateAttemptsFile" ]
      then
        rm -rf "$UpdateAttemptsFile"
        echo "Software Update Counter removed."
   fi
   echo "No new software to install. "
   elif [ "$UpdatesReqRestart" != "" ]
        then
          RestartReq=1
          echo "Restarts required equals $RestartReq"
          updatesWithRestart
   elif [ "$UpdatesNoRestart" != "" ]
        then
          RestartReq=0
          echo "Restarts required equals $RestartReq"
          installUpdatesNoRestart
  fi
}

#### This activates the entire script

getUpdates
